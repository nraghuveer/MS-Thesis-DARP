#import "template.typ": *
#show: ams-article.with(
  title: "Parallelization of DARP using Tabu Search for Multi-CPU",
  authors: (
    (
      name: "Raghuveer Naraharisetti",
      department: [Department of Computer Science],
      organization: [University of Wisconsin Milwaukee],
      location: [Milwaukee, WI 53211],
      email: "narahar2@uwm.edu",
      url: ""
    ),
  ),
  abstract: "Dail A Ride (DAR) is a transportation system to manage transportation demands in a bounded geographic area using fleet of vehicles, usually operated under set of constraints. DARP (Dail-A-Ride Problem) is generating a schedule for routes for fleet in DAR such that is optimized for various parameters, which can be configured based on the requirements. The DARP can be useful for many real-world use cases such as commuinity transport planning, para-transportation and robo-taxis. It is proved to be NP-Hard, thus many exact solutions are viable for real-world scale. Heuristics are proved to provide an near optimal solution at scale, but are very computer intensive. These heuristics algorithms are also adapted for modern GPUs, but modern GPUs are often expensive and very hard to get hands on.

  This paper takes a rather practical approach of using highly available and less expensive multi-core CPU machines to solve DARP. The rationale behind using multi-core CPU machines is that, they have now become common in everyday machines, they are less expensive, easy to get hands on, and does not require low level programming and architecture specific optimization, thanks to modern compilers. This paper uses Granular Tabu Search algorithm proposed for GPU[1]. This paper takes the approach of randomly generating large random solutions for the initial solution, rather than using popular method of assignment problem. This paper also discusses data-structures and shared memory model to reduce the number of total allocations. Also proposes a method to incrementally generate the base solution route for each iteration using dynamic programming techniques. 
  ",
  bibliography-file: "refs.bib",
)

= Introduction

Dial-A-Ride Problem (DARP) deals with moving passengers from one location to another with a fixed set of vehicles with fixed capacity constraint on each vehicle. The customers/passengers submit the requests with pickup & dropoff locations along with pickup & dropoff time windows, max ride time. The objective of DARP is to provide transportation service to these requests under constraints defined in the system while optimization for the objective function of the system.
A DAR where all the requests and constraints of the DAR are known in advance is classified as Static DAR. If the requests are allowed to arrive while the service is active, such DAR is classified as Dynamic DAR. This paper deals with Static DAR, so the all requests and constraints of the system are known in advance. The DAR system also has a single depot, where are the route starts and ends, i.e. all the vehicles routes should start and end at this depot. DARP is proved to be NP-Hard, it is generalized from the Pickup and Delivery Problem with Time windows (PDPTW)[1]. The optimization function for the DAR is flexible in the sense that it can be defined as combination of various factors and also possible to optimize for a subset by modifying the constant coefficients for each or subset of factors. This paper uses the optimization function that is defined here[2], which is a function on ride time of passengers, quality of service, operational costs, total travel time. The optimization function calculates the total voilations of the system under the constraints it is defined on. We use coefficients to control the weightage to each voilations. The lesser the optimization function value, the better the solution is.

A solution for DARP is provided here[6] which uses GPU to make the compute intensive parts run faster. While GPUs offer faster computing times, they are very expensive, very power hungry and often hard to get hands-on. Programming for GPU requires adapting the program to low-level architecture of the GPU and using librares that are designed to work on these architectures. This means, we need to change the algorithm to make use of new version of GPUs and it is also hard to cross compile the program to target multiple GPUs. On the other hand, we have seen rise of multi-cpu in everyday machines, where mobile devices are often coming with 4 cores, and everyday compute machines with an average of 8-12 cores. The silicon chip research is now moving towards ARM based chips, which provide more computing with less energy usage. We are also seeing everyday computing devices with more than 16 cores. So there is clearly a scope for compute intensive algorithms to take advantage of this. This requires certain changes to datastructures and memory model to the algorithm proposed for GPU, this paper discusses one approach on how we can make better use of shared memory in CPU, while using better datastructures which reuses the existing computed results to incrementally generate the result for the moves using dynamic programming rather than computing everything from scratch.


Another huge advantage of multi-core is shared memory, in GPUs the memory is low and it is very expensive to copy the data from CPU and GPU and also from GPU to CPU. In CPUs, we dont have to do it, because of shared memory.

= Meta Heuristics

DARP can be classified as an Integer Programming and combinatorial optimization problem. The best value for the optimization function in the system is referred as Global Optima and the best value for optimization function in each iteration or each move is referred as Local Optima. In greedy solution, local optima is often reaches the global optima. This is not the case with DARP, it is not possible to escape the local optima if we always want to consider a move if and only if we see that optimization function is getting better, i.e. In DARP, local optima is not equal to global optima. So, we have to escape the local optima to reach the global optima, which means we have to allow local optima to degrade and consider few moves even though the optimization function degrades, this will let us escape local optima and eventually reach global optima. Because of this reason, many meta-heuristic solutions have been proposed such as tabu search, variable neighbood search, deterministic annealing, multi-atomic annealing. Meta-Heuristic solutions doesnt guarantee global optima, but often guarantees near-global optima solutions in reasonable time, which is often desired on most of the real-world scenarios. This is why usage of meta-heuristics have seen a significant rise in the optimization problems.

A meta-heuristic in general is a high level procedure designed to provide a sufficiently good solution to an optimization problem[wiki]. It doesn't guarantee a global optimal solution can be found, but provides a solution that is near the global optimal solution. This paper uses Granular Tabu Search (`GTS`) meta-heuristic defined here[4]. A local search in tabu search is defined a as search for a solution that is the neighborhood of the current solution. A neighborhood is defined as set of solutions that can be obtained from current solution by applying or making a `MOVE`. It is important to determine the next neighborhood to explore at each iteration, with problems like DARP, where there exponential number of possible solutions, it is not possible or viable to explore all the possible moves, so we should achive an effective tradeoff between quality of next move and effort to find it. So we need some procedure to evaluate the quality of next move. In GTS, adaptive memory is used to devise such procedures. 

The notion of things that are considered "taboo" can change over time, as memory evolves and adapts. An adaptive memory continually updates by labeling certain actions or choices as "taboo" and this labeling changes over time. Tabu Search (TS) is based on the idea that making poor strategic choices can provide more useful information than making random ones. TS incorporates the principles of intelligent search by balancing the exploitation of good solution features and exploring new, promising regions. Two strategies, Intensification and Diversification, are employed to make the exploration process more effective. Intensification modifies choice rules to focus on examining neighbors of elite solutions, while Diversification encourages the search process to examine unvisited regions and generate solutions that differ significantly from those seen before. The Granular Tabu Search (GTS) is a TS that focuses on the local search phase. It uses a reduced neighborhood, known as the Granular Neighborhood, which excludes moves that are unlikely to lead to good solutions. The size of the neighborhood is regulated by a granular threshold based on the assumption that good solutions rarely contain long edges. During the local search phase, the algorithm only explores edges up to a certain threshold length. When no improving solution is found, the threshold is gradually increased. It is shown that this approach significantly reduces the computation needed to find good solutions compared to classical TS.
